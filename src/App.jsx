import React, { useEffect, useMemo, useState } from "react";

/* ===================== Firebase ===================== */
import { initializeApp } from "firebase/app";
import {
  getFirestore, addDoc, collection, serverTimestamp,
  onSnapshot, query, orderBy, deleteDoc, doc
} from "firebase/firestore";

/* ‚ñ∂‚ñ∂ Î≥∏Ïù∏ Firebase ÏΩòÏÜîÏùò Íµ¨ÏÑ±Í∞íÏúºÎ°ú ÍµêÏ≤¥ÌïòÏÑ∏Ïöî */
const firebaseConfig = {
  apiKey: "AIzaSyBMTM7oMnr7QZxlr02bznXu7Jm2OZtuwtc",
  authDomain: "palette-lab-e60ce.firebaseapp.com",
  projectId: "palette-lab-e60ce",
  storageBucket: "palette-lab-e60ce.appspot.com",
  messagingSenderId: "568599514296",
  appId: "1:568599514296:web:40bf43c8f891cffcb4b84d"
};
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

/* ===================== Ïï± ÌÉÄÏù¥ÌãÄ/Ïä§ÌÇ¥ ===================== */
const APP_TITLE = "(ÎîîÏûêÏù∏)Î∞∞ÏÉâ Ïã§Ïäµ - Ï†ÄÎèôÏ§ëÌïôÍµê ÌïôÎ∂ÄÎ™® Í≥µÍ∞ú ÏàòÏóÖ";

const SCHEMES = [
  { key: "tone_on_tone", label: "ÌÜ§Ïò®ÌÜ§" },
  { key: "tone_in_tone", label: "ÌÜ§Ïù∏ÌÜ§" },
  { key: "accent",       label: "ÏóëÏÑºÌä∏" },    // ÏÑ∏ÌçºÎ†àÏù¥ÏÖò -> ÏóëÏÑºÌä∏
  { key: "repetition",   label: "Î†àÌçºÌã∞ÏÖò" },
  { key: "emotional",    label: "Í∞êÏÑ±Î∞∞ÏÉâ" },
];

const SCHEME_DESCS = {
  tone_on_tone: "Í∞ôÏùÄ ÏÉâÏÉÅ(H)ÏóêÏÑú Î™ÖÎèÑ/Ï±ÑÎèÑÎßå Îã¨Î¶¨Ìïú Î∞∞ÏÉâ",
  tone_in_tone: "Ïú†ÏÇ¨Ìïú Î™ÖÎèÑ/Ï±ÑÎèÑ ÏïàÏóêÏÑú ÏÉâÏÉÅÎßå Îã¨Î¶¨Ìïú Î∞∞ÏÉâ",
  accent:       "Ï£ºÎêú ÌÜ§ ÏÜçÏóêÏÑú ÎåÄÎπÑÎêòÎäî ÏÉâÏùÑ ÌïúÎëê Í∞ú ÎÑ£Ïñ¥ Í∞ïÏ°∞(Ìè¨Ïù∏Ìä∏)ÌïòÍ∏∞",
  repetition:   "ÏÉâ ÎòêÎäî ÌÜ§ÏùÑ Î∞òÎ≥µÌï¥ Î¶¨Îì¨Í∞ê¬∑ÌÜµÏùºÍ∞êÏùÑ Ï†úÏãúÌïú Î∞∞ÏÉâ",
  emotional:    "ÍµêÏÇ¨Í∞Ä Ï†úÏãúÌïú Ï£ºÏ†úÏôÄ Í∞ÄÏû• Ïûò Ïñ¥Ïö∏Î¶¨Îäî Î∞∞ÏÉâ",
};

/* ===================== ÌåîÎ†àÌä∏(ÏöîÏ≤≠ Î¶¨Ïä§Ìä∏ Í∑∏ÎåÄÎ°ú) ===================== */
const CUSTOM_PALETTE = [
  // Î¨¥Ï±ÑÏÉâÍ≥Ñ
  { name: "ÌùëÎ∞±", hex: "#1D1E23", cmyk: "93,89,83,52" },
  { name: "Î∞±ÏÉâ", hex: "#FFFFFF", cmyk: "0,0,0,0" },
  { name: "ÌöåÏÉâ", hex: "#A4AAA7", cmyk: "38,27,31,0" },
  { name: "Íµ¨ÏÉâ", hex: "#959EA2", cmyk: "45,32,32,0" },
  { name: "ÏπòÏÉâ", hex: "#616264", cmyk: "72,64,62,4" },
  { name: "Ïó∞ÏßÄÌöåÏÉâ", hex: "#6F606E", cmyk: "55,58,40,20" },
  { name: "ÏÑ§Î∞±ÏÉâ", hex: "#DDE7E7", cmyk: "12,4,7,0" },
  { name: "Ïú†Î∞∞ÏÉâ", hex: "#E7E6D2", cmyk: "9,5,18,0" },
  { name: "ÏßÄÎ∞∞ÏÉâ", hex: "#E3DDCB", cmyk: "6,6,17,4" },
  { name: "ÏÜåÏÉâ", hex: "#D8C8B2", cmyk: "10,15,26,5" },

  // Ï†ÅÏÉâÍ≥Ñ
  { name: "Ï†ÅÏÉâ", hex: "#B82647", cmyk: "21,98,68,8" },
  { name: "ÌôçÏÉâ", hex: "#F15B5B", cmyk: "0,80,60,0" },
  { name: "Ï†ÅÌÜ†ÏÉâ", hex: "#9F494C", cmyk: "29,80,64,17" },
  { name: "Ìú¥ÏÉâ", hex: "#683235", cmyk: "40,80,66,44" },
  { name: "Í∞àÏÉâ", hex: "#966147", cmyk: "31,61,73,21" },
  { name: "Ìò∏Î∞ïÏÉâ", hex: "#BD7F41", cmyk: "21,51,84,8" },
  { name: "Ï∂îÌñ•ÏÉâ", hex: "#C38866", cmyk: "19,48,61,6" },
  { name: "Ïú°ÏÉâ", hex: "#D77964", cmyk: "11,62,59,2" },
  { name: "Ï£ºÏÉâ", hex: "#CA5E59", cmyk: "15,75,62,4" },
  { name: "Ï£ºÌôçÏÉâ", hex: "#C23352", cmyk: "18,94,60,5" },
  { name: "Îã¥Ï£ºÏÉâ", hex: "#EA8474", cmyk: "4,59,50,0" },
  { name: "ÏßÑÌôçÏÉâ", hex: "#BF2F7B", cmyk: "20,94,17,4" },
  { name: "ÏÑ†ÌôçÏÉâ", hex: "#CE5A9E", cmyk: "16,79,2,0" },
  { name: "Ïó∞ÏßÄÏÉâ", hex: "#BE577B", cmyk: "19,77,28,7" },
  { name: "ÌõàÏÉâ", hex: "#D97793", cmyk: "9,64,20,2" },
  { name: "ÏßÑÎ∂ÑÌôçÏÉâ", hex: "#DB4E9C", cmyk: "9,84,0,0" },
  { name: "Î∂ÑÌôçÏÉâ", hex: "#E2A6B4", cmyk: "7,39,14,1" },
  { name: "Ïó∞Î∂ÑÌôçÏÉâ", hex: "#E0709B", cmyk: "6,69,11,1" },
  { name: "Ïû•Îã®ÏÉâ", hex: "#E16350", cmyk: "6,75,70,1" },
  { name: "ÏÑùÍ∞ÑÏ£ºÏÉâ", hex: "#8A4C44", cmyk: "30,71,65,30" },
  { name: "ÌùëÌôçÏÉâ", hex: "#8E6F80", cmyk: "40,54,31,15" },

  // Ìô©ÏÉâÍ≥Ñ
  { name: "Ìô©ÏÉâ", hex: "#F9D537", cmyk: "3,13,89,0" },
  { name: "Ïú†Ìô©ÏÉâ", hex: "#EBBC6B", cmyk: "6,25,67,1" },
  { name: "Î™ÖÌô©ÏÉâ", hex: "#FEE134", cmyk: "2,7,89,0" },
  { name: "Îã¥Ìô©ÏÉâ", hex: "#F5F0C5", cmyk: "4,2,27,0" },
  { name: "ÏÜ°ÌôîÏÉâ", hex: "#F8E77F", cmyk: "4,4,62,0" },
  { name: "ÏûêÌô©ÏÉâ", hex: "#F7B938", cmyk: "2,29,89,0" },
  { name: "ÌñâÌô©ÏÉâ", hex: "#F1A55A", cmyk: "3,40,73,0" },
  { name: "ÎëêÎ°ùÏÉâ", hex: "#E5B98F", cmyk: "8,27,45,1" },
  { name: "Ï†ÅÌô©ÏÉâ", hex: "#ED9149", cmyk: "4,51,80,0" },
  { name: "ÌÜ†Ìô©ÏÉâ", hex: "#C8852C", cmyk: "18,50,97,5" },
  { name: "ÏßÄÌô©ÏÉâ", hex: "#D6B038", cmyk: "14,26,91,3" },
  { name: "ÌÜ†ÏÉâ", hex: "#9A6B31", cmyk: "30,54,91,20" },
  { name: "ÏπòÏûêÏÉâ", hex: "#F6CF7A", cmyk: "3,18,61,0" },
  { name: "ÌôçÌô©ÏÉâ", hex: "#DDA28F", cmyk: "9,39,38,2" },
  { name: "ÏûêÌô©ÏÉâ2", hex: "#BB9E8B", cmyk: "22,33,40,7" },

  // Ï≤≠Î°ùÏÉâÍ≥Ñ
  { name: "Ï≤≠ÏÉâ", hex: "#0B6DB7", cmyk: "89,56,0,0" },
  { name: "Î≤ΩÏÉâ", hex: "#00B5E3", cmyk: "73,5,4,0" },
  { name: "Ï≤úÏ≤≠ÏÉâ", hex: "#5AC6D0", cmyk: "59,0,20,0" },
  { name: "Îã¥Ï≤≠ÏÉâ", hex: "#00A6A9", cmyk: "96,4,40,0" },
  { name: "Ï∑®ÎûåÏÉâ", hex: "#5DC19B", cmyk: "62,0,51,0" },
  { name: "ÏñëÎûåÏÉâ", hex: "#6C71B5", cmyk: "64,58,0,0" },
  { name: "Î≤ΩÏ≤≠ÏÉâ", hex: "#448CCB", cmyk: "72,36,0,0" },
  { name: "Ï≤≠ÌòÑÏÉâ", hex: "#006494", cmyk: "99,59,22,3" },
  { name: "Í∞êÏÉâ", hex: "#026892", cmyk: "93,57,26,2" },
  { name: "ÎÇ®ÏÉâ", hex: "#6A5BA8", cmyk: "68,73,0,0" },
  { name: "Ïó∞ÎûåÏÉâ", hex: "#7963AB", cmyk: "60,69,0,0" },
  { name: "Î≤ΩÎûåÏÉâ", hex: "#6979BB", cmyk: "64,52,0,0" },
  { name: "ÏàôÎûåÏÉâ", hex: "#45436C", cmyk: "86,84,40,9" },
  { name: "Íµ∞Ï≤≠ÏÉâ", hex: "#4F599F", cmyk: "80,73,6,0" },
  { name: "ÎÖπÏÉâ", hex: "#417141", cmyk: "82,44,95,9" },
  { name: "Î™ÖÎ°ùÏÉâ", hex: "#16AA52", cmyk: "81,5,94,0" },
  { name: "Ïú†Î°ùÏÉâ", hex: "#6AB048", cmyk: "64,8,97,0" },
  { name: "Ïú†Ï≤≠ÏÉâ", hex: "#569A49", cmyk: "72,20,96,1" },
  { name: "Ïó∞ÎëêÏÉâ", hex: "#C0D84D", cmyk: "29,0,87,0" },
  { name: "Ï∂òÏú†Î°ùÏÉâ", hex: "#CBDD61", cmyk: "24,0,78,0" },
  { name: "Ï≤≠Î°ùÏÉâ", hex: "#009770", cmyk: "97,15,74,0" },
  { name: "ÏßÑÏ¥àÎ°ùÏÉâ", hex: "#0A8D5E", cmyk: "87,26,82,1" },
  { name: "Ï¥àÎ°ùÏÉâ", hex: "#1C9249", cmyk: "85,20,98,2" },
  { name: "ÌùëÎ°ùÏÉâ", hex: "#2E674E", cmyk: "89,52,83,9" },
  { name: "ÎπÑÏÉâ", hex: "#72C6A5", cmyk: "55,0,45,0" },
  { name: "Ïò•ÏÉâ", hex: "#9ED6C0", cmyk: "38,0,30,0" },
  { name: "ÏÇºÏ≤≠ÏÉâ", hex: "#5C6EB4", cmyk: "71,59,0,0" },
  { name: "ÎáåÎ°ùÏÉâ", hex: "#397664", cmyk: "74,27,59,6" },
  { name: "ÏñëÎ°ùÏÉâ", hex: "#31B675", cmyk: "74,0,74,0" },
  { name: "ÌïòÏóºÏÉâ", hex: "#245441", cmyk: "83,43,75,39" },
  { name: "ÌùëÏ≤≠ÏÉâ", hex: "#1583AF", cmyk: "84,39,17,0" },
  { name: "Ï≤≠Î≤ΩÏÉâ", hex: "#18B4E9", cmyk: "69,8,0,0" },

  // ÏûêÏÉâÍ≥Ñ
  { name: "ÏûêÏÉâ", hex: "#6D1B43", cmyk: "41,95,45,40" },
  { name: "ÏûêÏ£ºÏÉâ", hex: "#89236A", cmyk: "40,96,18,20" },
  { name: "Î≥¥ÎùºÏÉâ", hex: "#9C4998", cmyk: "42,85,1,1" },
  { name: "ÌôçÎûåÏÉâ", hex: "#733E7F", cmyk: "58,85,10,15" },
  { name: "Ìè¨ÎèÑÏÉâ", hex: "#5D3462", cmyk: "70,90,35,20" },
  { name: "Ï≤≠ÏûêÏÉâ", hex: "#403F95", cmyk: "90,90,1,1" },
  { name: "Î≤ΩÏûêÏÉâ", hex: "#84A7D3", cmyk: "47,25,1,1" },
  { name: "ÌöåÎ≥¥ÎùºÏÉâ", hex: "#B3A7CD", cmyk: "28,32,1,1" },
  { name: "Îã¥ÏûêÏÉâ", hex: "#BEA3C9", cmyk: "23,36,1,1" },
  { name: "Îã§ÏûêÏÉâ", hex: "#47302E", cmyk: "75,86,85,35" },
  { name: "Ï†ÅÏûêÏÉâ", hex: "#BA4160", cmyk: "15,86,42,13" },
 // üëâ Ï∂îÍ∞Ä ÏÉâÏÉÅ
  { name: "ÎÇ®ÏÉâ(C100 M100 K60)", hex: "#000033", cmyk: "100,100,0,60" },
];

/* ===================== ÌåîÎ†àÌä∏ Ïú†Ìã∏ ===================== */
function useCustomPalette() {
  const [seed, setSeed] = useState(() => Date.now());
  const colors = useMemo(() => {
    const list = [...CUSTOM_PALETTE];
    for (let i = list.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [list[i], list[j]] = [list[j], list[i]];
    }
    return list;
  }, [seed]);
  return { colors, reshuffle: () => setSeed(Date.now()) };
}

/* ===================== Í≥µÏö© Ïª¥Ìè¨ÎÑåÌä∏ ===================== */
function Swatch({ color, onPick }) {
  return (
    <button
      className="w-6 h-6 rounded border border-black/10"
      style={{ background: color.hex }}
      onClick={() => onPick(color)}
      title={`${color.name} (CMYK: ${color.cmyk})`}
    />
  );
}

function Palette({ colors, fixedOnTablet, onPick }) {
  return (
    <div className={fixedOnTablet ? "md:fixed md:right-4 md:top-24 md:bottom-4 md:w-72 overflow-y-auto" : ""}>
      <div className="p-3 rounded-2xl border border-black/10 shadow-sm bg-white">
        <div className="flex items-center justify-between mb-2">
          <h4 className="font-semibold">ÌåîÎ†àÌä∏</h4>
          <span className="text-xs text-black/50">{colors.length} colors</span>
        </div>
        <div className="grid grid-cols-8 gap-2">
          {colors.map((c, i) => (
            <Swatch key={i} color={c} onPick={onPick} />
          ))}
        </div>
      </div>
    </div>
  );
}

function SchemeBoard({ title, desc, schemeKey, value, selected, onSelect }) {
  return (
    <div className="p-3 rounded-2xl border border-black/10 bg-white">
      <div className="mb-2">
        <h4 className="font-semibold inline-block mr-2">{title}</h4>
        <span className="text-xs text-black/60">{desc}</span>
      </div>
      {/* Í∞ÄÎ°ú 1√ó5 Í≥†Ï†ï */}
      <div className="grid grid-cols-5 gap-2">
        {value.map((c, i) => (
          <div
            key={i}
            className={`h-12 rounded-xl border-2 cursor-pointer ${
              selected.schemeKey === schemeKey && selected.index === i ? "border-black" : "border-black/10"
            }`}
            style={{ background: c ? c.hex : "#fff" }}
            onClick={() => onSelect({ schemeKey, index: i })}
            title={c ? `${c.name} (CMYK: ${c.cmyk})` : "Îπà Ïπ∏"}
          />
        ))}
      </div>
    </div>
  );
}

/* ===================== Í≥µÌÜµ Ïú†Ìã∏ ===================== */
function serializeSchemes(s) {
  const out = {};
  for (const sc of SCHEMES) {
    out[sc.key] = (s[sc.key] || []).map((c) => (c ? `${c.name} | ${c.hex} | CMYK(${c.cmyk})` : null));
  }
  return out;
}

async function saveSubmission(payload) {
  await addDoc(collection(db, "submissions"), {
    ...payload,
    createdAt: serverTimestamp(),
  });
}

/* ===================== ÎùºÏö∞ÌåÖ ÌõÖ (Îã®Ïùº ÏÑ†Ïñ∏!) ===================== */
function useHashRoute() {
  const [hash, setHash] = useState(window.location.hash || "#/");
  useEffect(() => {
    const onHashChange = () => setHash(window.location.hash || "#/");
    window.addEventListener("hashchange", onHashChange);
    return () => window.removeEventListener("hashchange", onHashChange);
  }, []);
  return hash.replace(/^#/, "");
}

/* ===================== ÌïôÏÉùÏö© ===================== */
function StudentView({ onGoAdmin }) {
  const { colors } = useCustomPalette();
  const [name, setName] = useState("");
  const [sid, setSid] = useState("");
  const [selected, setSelected] = useState({ schemeKey: SCHEMES[0].key, index: 0 });
  const [schemes, setSchemes] = useState(() => {
    const init = {};
    for (const s of SCHEMES) init[s.key] = Array(5).fill(undefined);
    return init;
  });

  const handlePickColor = (color) => {
    if (!selected) return;
    setSchemes((prev) => {
      const next = { ...prev };
      const arr = [...next[selected.schemeKey]];
      arr[selected.index] = color;
      next[selected.schemeKey] = arr;
      return next;
    });
  };

  const onSubmit = async () => {
    if (!name.trim() || !sid.trim()) {
      alert("Ïù¥Î¶ÑÍ≥º ÌïôÎ≤àÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî.");
      return;
    }
    await saveSubmission({
      name: name.trim(),
      studentId: sid.trim(),
      data: serializeSchemes(schemes),
      pageTitle: APP_TITLE,
      userAgent: navigator.userAgent,
    });
    alert("Ï†úÏ∂ú ÏôÑÎ£å! (ÍµêÏÇ¨Ïö© ÌéòÏù¥ÏßÄÏóêÏÑú ÌôïÏù∏ Í∞ÄÎä•)");
  };

  return (
    <main className="max-w-6xl mx-auto px-4 py-6 grid md:grid-cols-[1fr_18rem] gap-4">
      <div className="space-y-4">
        <div className="p-4 rounded-2xl border border-black/10 shadow-sm bg-white flex flex-wrap gap-3 items-center">
          <input
            className="px-3 py-2 rounded-lg border border-black/10 bg-white"
            placeholder="Ïù¥Î¶Ñ"
            value={name}
            onChange={(e) => setName(e.target.value)}
          />
          <input
            className="px-3 py-2 rounded-lg border border-black/10 bg-white"
            placeholder="ÌïôÎ≤à"
            value={sid}
            onChange={(e) => setSid(e.target.value)}
          />
          <button onClick={onSubmit} className="px-4 py-2 rounded-xl bg-black text-white shadow">
            Ï†úÏ∂úÌïòÍ∏∞
          </button>
          <button onClick={onGoAdmin} className="ml-auto text-sm underline text-black/70">
            ÍµêÏÇ¨Ïö© ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
          </button>
        </div>

        <div className="grid gap-4">
          {SCHEMES.map((s) => (
            <SchemeBoard
              key={s.key}
              title={s.label}
              desc={SCHEME_DESCS[s.key]}
              schemeKey={s.key}
              value={schemes[s.key]}
              selected={selected}
              onSelect={setSelected}
            />
          ))}
        </div>
      </div>

      {/* ÌåîÎ†àÌä∏ (ÌÉúÎ∏îÎ¶ø Ïù¥ÏÉÅ Ïò§Î•∏Ï™Ω Í≥†Ï†ï) */}
      <div>
        <Palette colors={colors} fixedOnTablet={true} onPick={handlePickColor} />
      </div>
    </main>
  );
}

/* ===================== ÍµêÏÇ¨Ïö© ===================== */
function AdminPage() {
  const [items, setItems] = useState([]);
  const [selected, setSelected] = useState(null);

  useEffect(() => {
    const q = query(collection(db, "submissions"), orderBy("createdAt", "desc"));
    const unsub = onSnapshot(q, (snap) => {
      const list = snap.docs.map((d) => ({
        id: d.id,
        ...d.data(),
        createdAt: d.data().createdAt?.toDate?.().toISOString?.() ?? "",
      }));
      setItems(list);
    });
    return () => unsub();
  }, []);

  const handleDelete = async (id) => {
    const ok = confirm("Ï†ïÎßê Ïù¥ Ï†úÏ∂úÏùÑ ÏÇ≠Ï†úÌï†ÍπåÏöî? (ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§)");
    if (!ok) return;
    try {
      await deleteDoc(doc(db, "submissions", id));
      if (selected?.id === id) setSelected(null);
    } catch (e) {
      console.error(e);
      alert("ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
    }
  };

  return (
    <div className="max-w-6xl mx-auto px-4 py-6">
      <h2 className="text-2xl font-bold mb-4">ÍµêÏÇ¨Ïö©: Ï†úÏ∂ú Í¥ÄÎ¶¨</h2>
      <div className="grid md:grid-cols-[18rem_1fr] gap-4">
        {/* ÏôºÏ™Ω: Î¶¨Ïä§Ìä∏ */}
        <div className="p-4 rounded-2xl border border-black/10 bg-white shadow-sm">
          <h3 className="font-semibold mb-3">Ï†úÏ∂úÏûê Î¶¨Ïä§Ìä∏</h3>
          <div className="space-y-2 max-h-[70vh] overflow-y-auto">
            {items.length === 0 && <div className="text-sm text-black/50">Ï†úÏ∂ú ÎÇ¥Ïó≠Ïù¥ ÏóÜÏäµÎãàÎã§.</div>}
            {items.map((it) => (
              <div
                key={it.id}
                className={`w-full p-3 rounded-xl border ${
                  selected?.id === it.id ? "border-black/50" : "border-black/10"
                } hover:bg-black/5 flex items-center justify-between`}
                onClick={() => setSelected(it)}
              >
                <div>
                  <div className="font-medium">{it.name} ({it.studentId})</div>
                  <div className="text-xs text-black/60">{it.createdAt || "(ÏãúÍ∞Ñ ÏóÜÏùå)"}</div>
                </div>
                <button
                  className="text-xs px-2 py-1 rounded-md border border-black/10 hover:bg-red-50 hover:border-red-300 hover:text-red-600"
                  onClick={(e) => { e.stopPropagation(); handleDelete(it.id); }}
                >
                  ÏÇ≠Ï†ú
                </button>
              </div>
            ))}
          </div>
        </div>

        {/* Ïò§Î•∏Ï™Ω: ÏÉÅÏÑ∏ (ÏÉâÏÉÅ Î†åÎçîÎßÅ) */}
        <div className="p-4 rounded-2xl border border-black/10 bg-white shadow-sm min-h-[50vh]">
          {!selected ? (
            <div className="text-sm text-black/50">ÏôºÏ™ΩÏóêÏÑú Ï†úÏ∂úÏûêÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî.</div>
          ) : (
            <div className="space-y-6">
              <div className="text-sm text-black/70">
                <div>Ïù¥Î¶Ñ: <b>{selected.name}</b></div>
                <div>ÌïôÎ≤à: <b>{selected.studentId}</b></div>
                <div>Ï†úÏ∂úÏãúÍ∞Å: <b>{selected.createdAt}</b></div>
              </div>

              <div className="grid gap-4">
                {SCHEMES.map((s) => (
                  <div key={s.key}>
                    <div className="font-medium mb-2">{s.label}</div>
                    <div className="grid grid-cols-5 gap-2">
                      {(selected.data?.[s.key] || Array(5).fill(null)).map((txt, i) => {
                        if (!txt) {
                          return (
                            <div
                              key={i}
                              className="h-12 rounded-xl border border-black/10 bg-white"
                              title="(ÎπÑÏñ¥ ÏûàÏùå)"
                            />
                          );
                        }
                        // "Ïù¥Î¶Ñ | HEX | CMYK(...)" ‚Üí HEX ÌååÏã±Ìï¥ÏÑú Î∞∞Í≤ΩÏÉâ Ï†ÅÏö©
                        const parts = txt.split("|").map((p) => p.trim());
                        const colorName = parts[0] || "";
                        const hex = parts[1] || "#ffffff";
                        const cmyk = parts[2] || "";

                        return (
                          <div
                            key={i}
                            className="h-12 rounded-xl border border-black/10 flex items-center justify-center text-[10px] text-black/80"
                            style={{ background: hex }}
                            title={`${colorName} ${cmyk}`}
                          >
                            {colorName}
                          </div>
                        );
                      })}
                    </div>
                  </div>
                ))}
              </div>

              <details className="text-xs text-black/60">
                <summary>ÏõêÏãú Îç∞Ïù¥ÌÑ∞</summary>
                <pre className="whitespace-pre-wrap break-all">{JSON.stringify(selected, null, 2)}</pre>
              </details>

              <button
                className="text-sm px-3 py-1.5 rounded-md border border-red-300 text-red-600 hover:bg-red-50"
                onClick={() => handleDelete(selected.id)}
              >
                Ïù¥ Ï†úÏ∂ú ÏÇ≠Ï†ú
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

/* ===================== Ïï± ÏÖ∏ ===================== */
function AppShell() {
  const route = useHashRoute();
  useEffect(() => {
    if (!window.location.hash) window.location.hash = "/";
  }, []);

  return (
    <div className="min-h-screen bg-neutral-50">
      <header className="sticky top-0 z-10 bg-white/80 backdrop-blur border-b border-black/10">
        <div className="max-w-6xl mx-auto px-4 py-3 flex items-center justify-between">
          <h1 className="text-xl font-bold">{APP_TITLE}</h1>
          <nav className="flex items-center gap-3 text-sm">
            <a className="underline" href="#/">ÌïôÏÉùÏö©</a>
            <span>¬∑</span>
            <a className="underline" href="#/admin">ÍµêÏÇ¨Ïö©</a>
          </nav>
        </div>
      </header>

      {route === "/admin" ? <AdminPage /> : <StudentView onGoAdmin={() => (window.location.hash = "/admin")} />}
    </div>
  );
}

export default function App() {
  return <AppShell />;
}
